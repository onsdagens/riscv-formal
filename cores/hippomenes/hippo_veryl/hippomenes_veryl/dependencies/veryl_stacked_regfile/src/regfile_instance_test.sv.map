{"version":3,"file":"regfile_instance_test.sv.map","sources":["../../../../veryl_stacked_regfile/src/regfile_instance_test.veryl"],"names":["","`ifdef __veryl_test_hippomenes_veryl_regfile_instance__","`ifndef SYNTHESIS\n    import veryl_stacked_regfile_RegFilePkg::*;\n    module test ;\n\n        logic i_clk;\n        logic i_reset;\n        \n        //Command i_command;\n        logic [1:0] i_command;\n        logic [31:0] i_push_data [32];\n        logic [31:0] i_pop_data [32];\n        \n        logic [31:0] o_data [32];\n        \n        veryl_stacked_regfile_RegFileInstance regfile_instance(\n            i_clk,\n            i_reset,\n            i_command,\n            i_push_data,\n            i_pop_data, \n            o_data\n        );\n\n        initial begin\n            i_clk = 0; \n            i_reset = 1; \n            i_command = Command_push;\n            i_push_data[0] = 1; // push\n            i_push_data[1] = 2; // push\n            i_pop_data[0] = 3;  // pop\n            i_pop_data[1] = 4;  // pop\n            \n            // hold reset\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_data[0] == 0) else $error(\"0 -- reset\");\n            assert (o_data[1] == 0) else $error(\"0 -- reset\");\n            \n            // release reset\n            i_reset = 0;\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_data[0] == 1) else $error(\"1 -- push\");\n            assert (o_data[1] == 2) else $error(\"2 -- push\");\n            \n            i_command = Command_pop;\n            #10; i_clk=1; #10; i_clk=0; \n            assert (o_data[0] == 3) else $error(\"3 -- pop\");\n            assert (o_data[1] == 4) else $error(\"4 -- pop\"); \n\n            i_command = Command_none; // nop\n            i_push_data[0] = 42; // push\n            i_push_data[1] = 43; // push\n            i_pop_data[0] = 44;  // pop\n            i_pop_data[1] = 45;  // pop\n\n            #10; i_clk=1; #10; i_clk=0; \n            assert (o_data[0] == 3) else $error(\"3 -- retained\");\n            assert (o_data[1] == 4) else $error(\"4 -- retained\"); \n              \n            // reset \n            i_reset = 1;\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_data[0] == 0) else $error(\"0 -- re-reset\");\n            assert (o_data[1] == 0) else $error(\"0 -- re-reset\");\n        \n            i_reset = 0;\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_data[0] == 0) else $error(\"0 -- re-reset\");\n            assert (o_data[1] == 0) else $error(\"0 -- re-reset\");\n\n            $finish;\n         end\n   endmodule\n`endif"],"mappings":"AAAAA;;AAEAC;;;;;;;;;AACiBC"}