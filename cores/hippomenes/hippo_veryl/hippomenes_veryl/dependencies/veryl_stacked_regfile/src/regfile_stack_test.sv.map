{"version":3,"file":"regfile_stack_test.sv.map","sources":["../../../../veryl_stacked_regfile/src/regfile_stack_test.veryl"],"names":["","`ifdef __veryl_test_hippomenes_veryl_regfile_stack__","`ifndef SYNTHESIS\n    import veryl_stacked_regfile_RegFilePkg::*;\n    module test;\n        logic i_clk;\n        logic i_reset;\n\n        Command i_command;\n        logic [4:0] i_a_addr;\n        logic [4:0] i_b_addr;\n        logic i_w_ena;\n        logic [4:0] i_w_addr;\n        logic [31:0] i_w_data;\n        logic [31:0] o_a_data;\n        logic [31:0] o_b_data;\n        \n        veryl_stacked_regfile_RegFileStack regfile(\n            i_clk,\n            i_reset, \n            i_command,\n            i_a_addr,\n            i_b_addr,\n            i_w_ena,\n            i_w_addr,\n            i_w_data,\n            o_a_data,\n            o_b_data\n        );\n\n        initial begin\n            i_clk = 0; \n            i_reset = 1; \n            i_a_addr = 0; \n            i_b_addr = 0; \n            i_w_ena = 0; \n            i_w_addr = 0; \n            i_w_data = 0; \n            i_command = Command_none;\n\n            // hold reset\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_a_data == 0) else $error(\"0\");\n            assert (o_b_data == 0) else $error(\"0\");\n\n            // release reset\n            i_reset = 0;\n            #10; i_clk=1; #10; i_clk=0;\n            \n            // write to reg 0\n            i_w_ena = 1;\n            i_w_addr = 0; \n            i_w_data = 'h10;\n            i_a_addr = 0;\n            i_b_addr = 0;\n            #10; i_clk=1; #10; i_clk=0;\n\n            // read reg 0\n            i_w_ena = 0;\n            i_w_addr = 0; \n            i_w_data = 'h10;\n            i_a_addr = 0;\n            i_b_addr = 0;\n            #10; i_clk=1; #10; i_clk=0;\n              \n            // write to reg 1\n            i_w_ena = 1;\n            i_w_addr = 1;\n            i_w_data = 'h100;\n            i_a_addr = 1;\n            #10; i_clk=1; #10; i_clk=0;          \n\n            // write to reg 2\n            i_w_addr = 2;\n            i_w_data = 'h1000;\n            i_b_addr = 2;\n            #10; i_clk=1; #10; i_clk=0;         \n\n            // write to reg 2, with iw_ena false\n            i_w_ena = 0;\n            i_w_data = 'h2000;\n            #10; i_clk=1; #10; i_clk=0;     \n\n            #10; i_clk=1; #10; i_clk=0;    \n\n            // reset \n            i_reset = 1;\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_a_data == 0) else $error(\"0\");\n            assert (o_b_data == 0) else $error(\"0\");\n        \n            i_reset = 0;\n            #10; i_clk=1; #10; i_clk=0;\n\n            // test stacking\n            // reg[1] <- 'h1000_0000;\n            i_a_addr = 1; \n            i_b_addr = 31; \n            i_w_ena = 1; \n            i_w_addr = 1; \n            i_w_data = 'h1000_0000; \n\n            #10; i_clk=1; #10; i_clk=0;\n\n            i_w_addr = 31;\n            i_w_data = 'h2000_0000;\n            // reg[31] <- 'h2000_0000; \n\n            #10; i_clk=1; #10; i_clk=0;\n\n            // push\n            i_command = Command_push;\n            i_w_ena = 1;\n            i_w_addr = 1; \n            i_w_data = 'h1000_1000; \n            // reg[1] <- 'h1000_1000;\n\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_a_data == 'h1000_1000) else $error(\"write to new context\");\n            assert (o_b_data == 'h2000_0000) else $error(\"old context read\");\n\n            // nop\n            i_command = Command_none; \n            i_w_addr = 31; \n            i_w_data = 'h2000_2000; \n            // reg[31] <- 'h2000_2000;\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_a_data == 'h1000_1000) else $error(\"new context, value stored\");\n            assert (o_b_data == 'h2000_2000) else $error(\"write to new context\");\n\n            // pop\n            i_command = Command_pop; \n            i_w_ena = 1;\n            i_w_addr = 10;\n            i_w_data = 'h1010_1010; \n            // reg[10] <- 'h1010_1010;\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_a_data == 'h1000_0000) else $error(\"old context, value re-stored\");\n            assert (o_b_data == 'h2000_0000) else $error(\"old context, value re-stored\");\n\n            // nop\n            i_command = Command_none;\n            i_w_ena = 0;\n            i_a_addr = 10;\n            #10; i_clk=1; #10; i_clk=0;\n            assert (o_a_data == 'h0000_0000) else $error(\"old context, new value ignored on pop\");\n\n            $finish;\n         end\n   endmodule\n`endif"],"mappings":"AAAAA;;AAEAC;;;;;;;;;AACiBC"}