{"version":3,"file":"test_bench.sv.map","sources":["../../../../hippo_alu_veryl/src/test_bench.veryl"],"names":["","`ifdef __veryl_test_hippomenes_veryl_alu__","`ifndef SYNTHESIS\nimport hippo_alu_veryl_ALUPackage::*;\nmodule tb_alu;\n\n  logic [31:0] a;\n  logic [31:0] b;\n  ALUOp op;\n  logic sub_arith;\n\n  logic [31:0] res;\n\n  hippo_alu_veryl_HippoALU dut (\n      .a(a),\n      .b(b),\n      .op(op),\n      .sub_arith(sub_arith),\n      .res(res)\n  );\n\n  initial begin\n    $dumpfile(\"alu.fst\");\n    $dumpvars;\n\n    a = 3;\n    b = 5;\n    op = ALUOp_ALU_ADD;\n    sub_arith = 0;\n\n    #10;\n    assert (res == 8) $display(\"3 + 5 = 8\");\n    else $error();\n\n    a  = 3;  // 011\n    b  = 5;  // 101\n    op = ALUOp_ALU_SLT;\n    #10;\n    assert (res == 1) $display(\"(3 < 5) -> true\");\n    else $error();\n\n    a  = -3;\n    b  = 5;\n    op = ALUOp_ALU_SLT;\n    #10;\n    assert (res == 1) $display(\"signed (-3 < 5) -> true\");\n    else $error();\n\n    a  = -3;\n    b  = 5;\n    op = ALUOp_ALU_SLTU;\n    #10;\n    assert (res == 0) $display(\"unsigned (-3 < 5) -> false\");\n    else $error();\n\n    a  = -3;\n    b  = -5;\n    op = ALUOp_ALU_SLT;\n    #10;\n    assert (res == 0) $display(\"signed (-3 < -5) -> false\");\n    else $error();\n\n    a  = -3;\n    b  = -5;\n    op = ALUOp_ALU_SLTU;\n    #10;\n    assert (res == 0) $display(\"unsigned (-3 < -5) -> false\");\n    else $error();\n\n    a  = 3;\n    b  = -5;\n    op = ALUOp_ALU_SLTU;\n    #10;\n    assert (res == 1) $display(\"unsigned (3 < -5) -> true\");\n    else $error();\n\n    a  = 3;\n    b  = -5;\n    op = ALUOp_ALU_SLT;\n    #10;\n    assert (res == 0) $display(\"signed (3 < -5) -> false\");\n    else $error();\n\n    // shifting\n    a  = 3;\n    b  = 2;\n    op = ALUOp_ALU_SLL;\n    #10;\n    assert (res == 12) $display(\"(3 << 2) = 12\");\n    else $error();\n\n    a = 12;\n    b = 2;\n    op = ALUOp_ALU_SR;\n    sub_arith = 0;  // shift right logic\n    #10;\n    assert (res == 3) $display(\"unsigned (12 >> 2) = 3\");\n    else $error();\n\n    a = -12;\n    b = 2;\n    op = ALUOp_ALU_SR;\n    sub_arith = 0;\n    #10;\n    assert(res == 'h3ffffffd) $display(\"unsigned (-12 >> 2) = 0x3ffffffd\");\n    else $error(\"logical right shift fail\");\n\n    a = 12;\n    b = 2;\n    op = ALUOp_ALU_SR;\n    sub_arith = 1;  // shift right arithmetic\n    #10;\n    assert (res == 3) $display(\"signed (12 >> 2) = 3\");\n    else $error();\n\n    a = -12;\n    b = 2;\n    op = ALUOp_ALU_SR;\n    sub_arith = 1;  // shift right arithmetic\n    #10;\n    //assert (res == -3) $display(\"signed(-12 >>> 2) = -3\");\n    //else $error(\"arithmetic right shift fail res = %h\", res);\n\n    #10 $finish;\n\n  end\nendmodule\n`endif"],"mappings":"AAAAA,AAAAC;;;;;;;;;AACiBC"}