#[test(test_mem)]
{
    // we need this to trigger code generation
    // for our generic memory.
    module InstantiateMemory #() (
        clk_i    : input  clock           ,
        rst_i    : input  reset           ,
        address_i: input  logic<$clog2(4)>,
        we_i     : input  logic           ,
        data_i   : input  logic<32>       ,
        data_o   : output logic<32>       ,
    ) {
        inst mem: Memory::<32> #(
            Depth: 4,
            //   InitFile: "test.mem",
        ) (
            clk_i      ,
            rst_i      ,
            address_i  ,
            we_i       ,
            data_i     ,
            data_o     ,
        );
    }
    embed (inline) sv{{{
    module test_mem;
        logic clk;
        logic rst;
        logic[$clog2(4)-1:0] address;
        logic we;
        logic[31:0] data_i;
        logic[31:0] data_o;        
        hippo_memory___Memory__32 #(
            .Depth(4),
         //   .InitFile("test.mem"),
            .Writeable(1)
        ) mem_dut(
            .clk_i(clk),
            .rst_i(rst),
            .address_i(address),
            .we_i(we),
            .data_i(data_i),
            .data_o(data_o)
        );
        initial begin
            rst = 0;
            clk = 0;
            we = 0;
            address = 0;
            data_i = 0;
            #15 rst = 1;
        end
        always #10 clk = ~clk;

        initial begin
            #40;
            assert(data_o == 'hDEADBEEF);
            #20; 
            $finish;
        end
    endmodule
}}}

}
